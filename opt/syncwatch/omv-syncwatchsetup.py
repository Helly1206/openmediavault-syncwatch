#!/usr/bin/env python3
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2020 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.
import os
import json
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
from xml.dom.minidom import parseString
import openmediavault.confdbadm
import openmediavault.config.object
import openmediavault.config.database

ID_SYNCWATCH = "conf.service.syncwatch"
ID_SHAREDFOLDERS = "conf.system.sharedfolder"
ID_MOUNTPOINTS = "conf.system.filesystem.mountpoint"
SHARES_LOCATION = "/sharedfolders/"
XML_FILE_LOC = "/etc/syncwatch.xml"
ENCODING = 'utf-8'

class Readdb(openmediavault.confdbadm.ICommand):
    @property
    def description(self):
        return "Reads syncwath settings from database."

    def execute(self, dbid):
        db = openmediavault.config.Database()    
        objs = db.get(dbid, None)
        # Prepare the output.
        if isinstance(objs, list):
            data = [obj.get_dict() for obj in objs]
        else:
            if not isinstance(objs, openmediavault.config.Object):
                return None
            data = objs.get_dict()
        return data

def getShare(ref):
    data = readdb.execute(ID_SHAREDFOLDERS)
    sharedata = {}
    for share in data:
        if share['uuid'].lower() == ref.lower():
            sharedata=share
            break
    return sharedata

def getMountPoint(uuid):
    data = readdb.execute(ID_MOUNTPOINTS)
    mountdata = {}
    for mount in data:
        if mount['uuid'].lower() == uuid.lower():
            mountdata=mount
            break
    return mountdata

def getSafeFolder(ref):
    sharedFolder = None
    share = getShare(ref)
    
    if share:
        mountpoint = getMountPoint(share['mntentref'])
        if mountpoint:
            sharedFolder=os.path.join(mountpoint['dir'],share['reldirpath'])
    
    return sharedFolder

def getSharedFolder(ref):
    sharedFolder = None
    share = getShare(ref)
    
    if share:
        sharedFolder=os.path.join(SHARES_LOCATION,share['reldirpath'])
    
    return sharedFolder

def getShareName(ref):
    shareName = None
    share = getShare(ref)
    
    if share:
        shareName=share['name']
    
    return shareName

def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = tostring(elem, ENCODING)
    reparsed = parseString(rough_string)
    return reparsed.toprettyxml(indent="\t").replace('<?xml version="1.0" ?>','<?xml version="1.0" encoding="%s"?>' % ENCODING)

def bstr(boolele):
    if boolele:
        return "true"
    else:
        return "false"

if __name__ == "__main__":
    readdb = Readdb()
    data = readdb.execute(ID_SYNCWATCH)
        
    if data['enable'] == False:
        pass
    #    print("Syncwatch service not enabled, exit ...")
    #    exit(1)
      
        
    # xml: https://pymotw.com/2/xml/etree/ElementTree/create.html
    
    syncs = Element('syncs')
    comment = Comment("This file is generated by OpenMediaVault, don't edit this file, it will be overwritten")
    syncs.append(comment)
    jobs = data['jobs']['job']
    for job in jobs:
        if job['enable']:
            if job['safemount']:
                source = getSafeFolder(job['sourceref'])
                destination = getSafeFolder(job['destref'])
            else:
                source = getSharedFolder(job['sourceref'])
                destination = getSharedFolder(job['destref'])
            #print(job)
            if source == None:
                print("Source folder not found in database, skip this job ...")
                break
            if destination == None:
                print("Destination folder not found in database, skip this job ...")
                break
            element = SubElement(syncs, 'sync_'+getShareName(job['sourceref'])+"_"+getShareName(job['destref']))
            elesrc = SubElement(element, 'source')
            elesrc.text = source
            eledest = SubElement(element, 'destination')
            eledest.text = destination
            #print("Source:"+source)
            #print("Destination:"+destination)  
            eledelay = SubElement(element, 'delay')
            eledelay.text = str(job['delay'])
            elereset = SubElement(element, 'resettimer')
            elereset.text = bstr(job['resettimer'])
            eleinit = SubElement(element, 'initsync')
            eleinit.text = bstr(job['initsync'])
            elereverse = SubElement(element, 'reversesync')
            elereverse.text = bstr(job['reversesync'])
            eleretry = SubElement(element, 'retry')
            eleretry.text = bstr(job['retry'])
            eledelete = SubElement(element, 'delete')
            eledelete.text = bstr(job['delete'])
            eleexclude = SubElement(element, 'exclude')
            eleexclude.text = job['exclude']
            eleinclude = SubElement(element, 'include')
            eleinclude.text = job['include']
            elecompress = SubElement(element, 'compress')
            elecompress.text = bstr(job['compress'])
            eleupdate = SubElement(element, 'update')
            eleupdate.text = bstr(job['update'])
            eleoptions = SubElement(element, 'options')
            eleoptions.text = job['options']
    #print(prettify(syncs))
    
    with open(XML_FILE_LOC, "w") as xml_file:
        xml_file.write(prettify(syncs))
    
    """
    		<source> is the source folder, obligated
		<destination> is the destination folder, obligated
		<delay> defines the delay between writing something to the source folder 
						and starting to sync in seconds. This is to prevent syncing while still 
						writing data. Default is 10 seconds.
		<resettimer> defines whether to reset the timer (start the delay again) when writing 
					 	data during the delay time. Default is true.
		<initsync> defines whether to sync on the program start. Default is false.
		<reversesync> defines whether to sync to source when a file or folder on the target changes.
						Default is false.
		<retry> defines whether to keep retrying setting up a connection, e.g. when source or destination
  						is not mounted (yet). Retry is done silent with a 10 second delay. Default is false.
		The following options are all rsync options. The a (archive) option is always added.
		<delete> defines whether to delete file on the destination (see rsync delete). Default is true.
		<exclude> defines patterns to be excluded from syncing (see rsync exclude). Multiple patterns
						should be comma separated. Default is empty.
		<include> defines patterns to be included in syncing (see rsync include). Multiple patterns
						should be comma separated. Default is empty.
		<compress> defines whether to compress files to be synced (see rsync compress). Default is true.
		<update> defines whether to update files to be synced (see rsync update). Default is true.
		<options> defines options added to rsync (see rsync manual). Multiple patterns may be comma
						separated. Contents is not checked. Default is empty.
    
    
    """
    
    